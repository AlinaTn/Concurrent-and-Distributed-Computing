/* ClientTCP.c -Client TCP
   Trimite doua numere unui server; suma lor este receptionata de la server.      
*/
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <string.h>

/* codul de eroare returnat de anumite apeluri */
extern int errno;

/* portul de conectare la server*/
int port;

int main (int argc, char *argv[])
{
  int sd;			// descriptorul de socket
  struct sockaddr_in server;	// structura folosita pentru conectare 
  char buffer[100];		// mesajul trimis
  float number1, number2;  // cele doua numere

  /* exista toate argumentele in linia de comanda? */
  if (argc != 3)
    {
      printf ("Sintaxa: %s <adresa_server> <port>\n", argv[0]);
      return -1;
    }

  /* stabilim portul */
  port = atoi (argv[2]);

  /* cream socketul */
  if ((sd = socket (AF_INET, SOCK_STREAM, 0)) == -1)
    {
      perror ("Eroare la socket().\n");
      return errno;
    }

  /* umplem structura folosita pentru realizarea conexiunii cu serverul */
  /* familia socket-ului */
  server.sin_family = AF_INET;
  /* adresa IP a serverului */
  server.sin_addr.s_addr = inet_addr(argv[1]);
  /* portul de conectare */
  server.sin_port = htons (port);
  
  /* ne conectam la server */
  if (connect (sd, (struct sockaddr *) &server,sizeof (struct sockaddr)) == -1)
    {
      perror ("[client]Eroare la connect().\n");
      return errno;
    }

  /* citirea numerelor si trimiterea lor catre server */
  bzero (buffer, 100);
  printf ("[client]Introduceti primul numar: ");
  fflush (stdout);
  scanf ("%f", &number1);
   printf ("[client]Introduceti al doilea numar: ");
  fflush (stdout);
  scanf ("%f", &number2);
  sprintf(buffer, "%f %f", number1, number2);
  
  /* trimiterea numerelor catre server */
  printf("Trimitem catre server...%s\n",buffer);
  if (write (sd, buffer, 100) <= 0)
    {
      perror ("[client]Eroare la write() spre server.\n");
      return errno;
    }

  /* citirea raspunsului dat de server 
     (apel blocant pina cind serverul raspunde) */
  if (read (sd, buffer, 100) < 0)
    {
      perror ("[client]Eroare la read() de la server.\n");
      return errno;
    }
  /* afisam suma primita */
  printf ("[client]Mesajul primit este: %s\n", buffer);

  /* inchidem conexiunea, am terminat */
  close (sd);
}
